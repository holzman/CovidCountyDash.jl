precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("#pipeline##kw")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#736#738")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.join), Array{String, 1}, Char})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(HTTP.URIs.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.URIs.RegexAndMatchData, 1}, HTTP.URIs.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.Parsers.RegexAndMatchData, 1}, HTTP.Parsers.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.CookieRequest.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.Servers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, 1}, Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(PlotlyBase.__init__)})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#584")), Base.Pipe, Base.Pipe, Base.Pipe, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.setup_stdio), Base.Pipe, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.setproperty!), Base.Process, Symbol, Base.DevNull})
precompile(Tuple{typeof(Base.setproperty!), PlotlyBase.Pipes, Symbol, Base.Process})
precompile(Tuple{getfield(Base, Symbol("##readline#306")), Bool, typeof(Base.readline), Base.Pipe})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Int64})
precompile(Tuple{typeof(Base.get!), Type{Array{Function, 1}}, Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Dash.__init__)})
precompile(Tuple{getfield(DashBase, Symbol("#Resource#25#26")), String, Nothing, String, Symbol, Nothing, Nothing, Type{DashBase.Resource}})
precompile(Tuple{getfield(DashBase, Symbol("#Resource#25#26")), String, String, String, Symbol, Nothing, Nothing, Type{DashBase.Resource}})
precompile(Tuple{getfield(DashBase, Symbol("#Resource#25#26")), String, String, Nothing, Symbol, Bool, Nothing, Type{DashBase.Resource}})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Random.MersenneTwister, 1}, Random.MersenneTwister})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Function, 1}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{getfield(PlotlyBase, Symbol("#189#201"))})
precompile(Tuple{getfield(PlotlyBase, Symbol("#190#202"))})
precompile(Tuple{getfield(PlotlyBase, Symbol("#191#203"))})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Requires._include_path), String})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{typeof(PlotlyBase.include), String})
precompile(Tuple{getfield(Base, Symbol("##s91#155")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:kind,), Tuple{String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:style,), Tuple{PlotlyBase.Style}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(DocStringExtensions, Symbol("#29#30")){typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any, N} where N})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, Expr, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(DashCoreComponents.__init__)})
precompile(Tuple{getfield(DashBase, Symbol("#Resource#25#26")), String, Nothing, String, Symbol, Nothing, Bool, Type{DashBase.Resource}})
precompile(Tuple{getfield(DashBase, Symbol("#Resource#25#26")), String, Nothing, String, Symbol, Bool, Nothing, Type{DashBase.Resource}})
precompile(Tuple{getfield(DashBase, Symbol("#Resource#25#26")), String, Nothing, String, Symbol, Nothing, Symbol, Type{DashBase.Resource}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, DashBase.ResourcePkg}, DashBase.ResourcePkg, String})
precompile(Tuple{typeof(DashHtmlComponents.__init__)})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.CoreLogging._invoked_shouldlog), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#746")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#745")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Type}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:debug, :typemap), Tuple{Bool, Base.Dict{Type, Type}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, Bool}}})
precompile(Tuple{typeof(CovidCountyDash.download_and_preprocess)})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:reached_redirect_limit,), Tuple{Bool}}, typeof(HTTP.request), Type{HTTP.BasicAuthRequest.BasicAuthLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{getfield(Base, Symbol("#56#57#59")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}}, getfield(Base, Symbol("#56#58")){getfield(Base, Symbol("#56#57#59")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#getconnection##kw")), NamedTuple{(:reuse_limit, :iofunction, :reached_redirect_limit), Tuple{Int64, Nothing, Bool}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Bool})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##newconnection#25")), Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}}, typeof(HTTP.ConnectionPool.newconnection), HTTP.ConnectionPool.Pod, Type{T} where T, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64})
precompile(Tuple{typeof(Sockets.connect), Sockets.IPv4, UInt64})
precompile(Tuple{typeof(MbedTLS.f_rng), MbedTLS.CtrDrbg, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.isopen), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.getproperty), Sockets.TCPSocket, Symbol})
precompile(Tuple{typeof(Base.bytesavailable), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.eof), Sockets.TCPSocket})
precompile(Tuple{typeof(Base.min), UInt64, Int64})
precompile(Tuple{Type{Int32}, UInt64})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, MbedTLS.SSLContext})
precompile(Tuple{typeof(HTTP.ConnectionPool.client_transaction), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
precompile(Tuple{getfield(HTTP, Symbol("#request##kw")), NamedTuple{(:iofunction, :reached_redirect_limit), Tuple{Nothing, Bool}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.ischunked), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), Base.GenericIOBuffer{Array{UInt8, 1}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.check_open), Sockets.TCPSocket})
precompile(Tuple{getfield(MbedTLS, Symbol("#25#26")){MbedTLS.SSLContext}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}}})
precompile(Tuple{typeof(HTTP.ConnectionPool.hashconn), Type{T} where T, String, String, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Function, Int64})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{getfield(CSV, Symbol("##read#77")), Bool, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:normalizenames,), Tuple{Bool}}}, typeof(CSV.read), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{T} where T})
precompile(Tuple{Type{Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Array{Tuple{Ptr{UInt8}, Int64}, 1}, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Int64, Bool})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(Base.vcat), Array{Type, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(CSV, Symbol("#15#19")), Array{Type, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(CSV.nonstandardtype), Base.Iterators.Filter{getfield(CSV, Symbol("#15#19")), Array{Type, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{getfield(CSV, Symbol("#15#19")), Array{Type, 1}}, typeof(CSV.nonstandardtype)}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Type{CSV.Header{false, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{UInt8, 1}}}, String, Array{Symbol, 1}, Int64, Int64, UInt8, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Array{Int64, 1}, Array{Type, 1}, Array{UInt8, 1}, Array{Int64, 1}, Float64, Type{T} where T})
precompile(Tuple{getfield(Parsers, Symbol("##s46#15")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Dates.genvar), DataType})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Parsers, Symbol("##s46#18")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, getfield(Parsers, Symbol("#19#20"))}, Int64})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64, Int64})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dates.Date}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dates.DateTime}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dates.Time}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:debug, :typemap), Tuple{Bool, Base.Dict{Type, Type}}}, Type{CSV.File{threaded} where threaded}, CSV.Header{false, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.allocate), Int64, Int64, Array{Type, 1}, Array{UInt8, 1}, Array{CSV.RefPool, 1}})
precompile(Tuple{typeof(CSV.allocate), Core.TypeofBottom, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.MissingVector, Int64})
precompile(Tuple{typeof(CSV.parsefilechunk!), Base.Val{false}, Int64, Base.Dict{Type, Type}, Array{AbstractArray{T, 1} where T, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Array{Int64, 1}, Float64, Array{CSV.RefPool, 1}, Int64, Int64, Array{Type, 1}, Array{UInt8, 1}, Bool, Parsers.Options{false, true, true, false, Base.Missing, UInt8, Nothing}, Nothing, Type{Tuple{}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, Type}, Type{T} where T})
precompile(Tuple{typeof(SentinelArrays.defaultsentinel), Type{T} where T})
precompile(Tuple{typeof(Base.reinterpret), Type{Dates.Date}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Dates.Date, 1, UInt8, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.SentinelArray{Dates.Date, 1, Dates.Date, Base.Missing, Array{Dates.Date, 1}}, Int64})
precompile(Tuple{Type{Base.Dict{Union{Base.Missing, String}, UInt32}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(CSV.allocate), Type{T} where T, Int64})
precompile(Tuple{Type{SentinelArrays.SentinelArray{Int64, 1, S, V, A} where A<:AbstractArray{Int64, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Base.ReinterpretArray{Int64, 1, UInt8, Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Dates.Date, 1, Dates.Date, Base.Missing, Array{Dates.Date, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Dates.Date, 1, Dates.Date, Base.Missing, Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Dates.Date, 1}, Int64})
precompile(Tuple{Type{Base.Dict{String, UInt32}}, Base.Dict{Union{Base.Missing, String}, UInt32}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{getfield(CSV, Symbol("#25#27")), Tuple{Symbol, Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{Dates.Date, 1}}, Array{Dates.Date, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{Dates.Date, 1}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, getfield(CSV, Symbol("#25#27"))}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(CSV, Symbol("#25#27")), Tuple{Symbol, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{Dates.Date, 1}}, Type{Symbol}, Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.Dict{Symbol, Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{AbstractArray{T, 1} where T, 1}}}, getfield(CSV, Symbol("#25#27"))}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(CSV, Symbol("#25#27")), Tuple{Symbol, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#25#27")), Tuple{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Array{Int64, 1}, Symbol})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{AbstractArray{T, 1} where T, 1}, Base.Dict{Symbol, AbstractArray{T, 1} where T}})
precompile(Tuple{Type{Tables.CopiedColumns{T} where T}, CSV.File{false}})
precompile(Tuple{typeof(Base.:(|>)), Tables.CopiedColumns{CSV.File{false}}, Type{T} where T})
precompile(Tuple{Type{DataFrames.DataFrame}, Tables.CopiedColumns{CSV.File{false}}})
precompile(Tuple{typeof(Base.length), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(HTTP.ConnectionPool.isvalid), HTTP.ConnectionPool.Pod, HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}, Int64, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.union), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.intersect), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base._shrink), Function, Array{String, 1}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.map), Function, Array{DataFrames.DataFrame, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#128#132")){String}, Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DataFrames.DataFrame, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Dates.Date, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Dates.Date, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Dates.Date, 1}, 1}, Array{Dates.Date, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Dates.Date, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Dates.Date, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Dates.Date, 1}, 1}, Base.Generator{Array{Array{Dates.Date, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Dates.Date, 1}, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Dates.Date, 1}, 1}})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Tables.allocatecolumn), Type{T} where T, Int64})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Dates.Date}, Int64})
precompile(Tuple{Type{Array{Dates.Date, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.length), Array{Array{Dates.Date, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Dates.Date, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.Date, 1}, Int64, Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}, Array{Base.Missing, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._similar_for), Array{AbstractArray{T, 1} where T, 1}, Type{Int64}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.length), Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, String}}, Int64})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Missing}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, String}, 1}, Int64, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}, Base.Generator{Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{String}, Int64})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, 1}, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Int64, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Int64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base._copyto_impl!), Array{AbstractArray{T, 1} where T, 1}, Int64, Array{AbstractArray{T, 1} where T, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##select!#380")), Bool, typeof(DataFrames.select!), DataFrames.DataFrame, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("#select##kw")), NamedTuple{(:copycols, :renamecols), Tuple{Bool, Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Function, Base.Pair{Array{Symbol, 1}, Base.Pair{DataFrames.ByRow{getfield(CovidCountyDash, Symbol("#13#14"))}, Symbol}}})
precompile(Tuple{getfield(DataFrames, Symbol("#manipulate##kw")), NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, typeof(DataFrames.manipulate), DataFrames.DataFrame, Function, Base.Pair{Array{Symbol, 1}, Base.Pair{DataFrames.ByRow{getfield(CovidCountyDash, Symbol("#13#14"))}, Symbol}}})
precompile(Tuple{getfield(DataFrames, Symbol("##manipulate#394")), Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, Any, Vararg{Any, N} where N})
precompile(Tuple{getfield(DataFrames, Symbol("#395#396")){Bool, DataFrames.DataFrame}, Function})
precompile(Tuple{typeof(Base._array_for), Type{Base.OneTo{Int64}}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.OneTo{Int64}, 1}, Base.OneTo{Int64}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#395#396")){Bool, DataFrames.DataFrame}}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#395#396")){Bool, DataFrames.DataFrame}, Base.Pair{Array{Symbol, 1}, Base.Pair{DataFrames.ByRow{getfield(CovidCountyDash, Symbol("#13#14"))}, Symbol}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.OneTo{Int64}, 1}, Base.Pair{Array{Int64, 1}, Base.Pair{DataFrames.ByRow{getfield(CovidCountyDash, Symbol("#13#14"))}, Symbol}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#395#396")){Bool, DataFrames.DataFrame}}, Int64, Int64})
precompile(Tuple{typeof(DataFrames._manipulate), DataFrames.DataFrame, Any, Bool, Bool})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Dates.Date, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, String}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{String, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, Int64}, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.select_transform!), Union{Function, Base.Pair{#s151, #s150} where #s150<:(Base.Pair{#s149, #s148} where #s148<:Union{AbstractArray{Symbol, 1}, DataType, Symbol} where #s149<:Union{Function, Type}) where #s151<:Union{Int64, AbstractArray{Int64, 1}, DataFrames.AsTable}, Type}, DataFrames.DataFrame, DataFrames.DataFrame, Base.Set{Symbol}, Bool, Base.RefValue{Bool}})
precompile(Tuple{typeof(DataFrames._transformation_helper), DataFrames.DataFrame, Array{Int64, 1}, Function})
precompile(Tuple{typeof(Base._similar_for), Array{Int64, 1}, Type{Array{String, 1}}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#364#365")){DataFrames.DataFrameColumns{DataFrames.DataFrame}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{String, 1}, 1}, Array{String, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#364#365")){DataFrames.DataFrameColumns{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{String, 1}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{String, 1}, 1}, Array{Union{Base.Missing, String}, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{Int64, 1}, getfield(DataFrames, Symbol("#364#365")){DataFrames.DataFrameColumns{DataFrames.DataFrame}}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{1}, SparseArrays.HigherOrderFns.SparseVecStyle})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{DataFrames.ByRow{getfield(CovidCountyDash, Symbol("#13#14"))}, Array{String, 1}, Vararg{AbstractArray{T, 1} where T, N} where N})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(CovidCountyDash, Symbol("#13#14")), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, SparseArrays.HigherOrderFns.SparseVecStyle})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(CovidCountyDash, Symbol("#13#14")), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(CovidCountyDash, Symbol("#13#14")), Tuple{Array{String, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), getfield(CovidCountyDash, Symbol("#13#14")), String, String, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(CovidCountyDash, Symbol("#13#14")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(CovidCountyDash, Symbol("#13#14")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Union{Base.Missing, String}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), getfield(CovidCountyDash, Symbol("#13#14")), String, String, Base.Missing})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{String, 1}, Base.RefValue{String}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.ismissing), Tuple{SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.ismissing), Tuple{SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}}}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.BitArray{1}, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), getfield(CovidCountyDash, Symbol("#13#14")), String, Base.Missing, Int64})
precompile(Tuple{typeof(DataFrames._fix_existing_columns_for_vector), DataFrames.DataFrame, DataFrames.DataFrame, Base.RefValue{Bool}, Int64, Any})
precompile(Tuple{typeof(DataFrames._add_col_check_copy), DataFrames.DataFrame, DataFrames.DataFrame, Array{Int64, 1}, Bool, Any, Symbol, Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("##sort!#613")), Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sort!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.push!), Array{Base.Order.Ordering, 1}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, DataFrames.DataFrame})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Dates.Date, 1}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#defalg##kw")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Symbol, 1}}}, typeof(Base.Sort.defalg), DataFrames.DataFrame, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Dates.Date, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, SortingAlgorithms.TimSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Dates.Date, 1}}}})
precompile(Tuple{typeof(Base.permute!!), Array{Dates.Date, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Union{Base.Missing, String}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.permute!!), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Dict{String, String}, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Dict{Symbol, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:textAlign,), Tuple{String}}}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:textAlign,), Tuple{String}}, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:href,), Tuple{String}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:height, :lineHeight, :margin), Tuple{String, String, String}}}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:height, :lineHeight, :margin), Tuple{String, String, String}}, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:width, :margin, :textAlign), Tuple{String, String, String}}}}}, Type{NamedTuple{(:children,), Tuple{Array{Any, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:width, :margin, :textAlign), Tuple{String, String, String}}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:width,), Tuple{String}}}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:width,), Tuple{String}}, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Array{NamedTuple{(:label, :value), Tuple{String, Int64}}, 1}, Bool, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:width,), Tuple{String}}}}}, Type{NamedTuple{(:children,), Tuple{DashBase.Component}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:width,), Tuple{String}}, DashBase.Component}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Array{Any, 1}, Bool, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:id,), Tuple{String}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Array{DashBase.Component, 1}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DashBase.Component}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:width,), Tuple{String}}}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:width,), Tuple{String}}, Array{DashBase.Component, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:className,), Tuple{String}}}, Type{NamedTuple{(:children,), Tuple{DashBase.Component}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, DashBase.Component}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, NamedTuple{(:display,), Tuple{String}}, Array{NamedTuple{(:label, :value), Tuple{String, String}}, 1}, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(Symbol("padding-left"),), Tuple{String}}}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(Symbol("padding-left"),), Tuple{String}}, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Int64, Int64, Int64, Int64, NamedTuple{(:margin,), Tuple{String}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, NamedTuple{(:visibility, :display), Tuple{String, String}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:id, :style), Tuple{String, NamedTuple{(:visibility, :display), Tuple{String, String}}}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, NamedTuple{(:visibility, :display), Tuple{String, String}}, Array{DashBase.Component, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, NamedTuple{(:display,), Tuple{String}}, Array{NamedTuple{(:label, :value), Tuple{String, String}}, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:className, :contextMenu), Tuple{String, String}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Array{DashBase.Component, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:className,), Tuple{String}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Base.Dict{Any, Any}, String, String, String, String, String, Bool}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Symbol, Symbol, Symbol, String, String}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Symbol, Symbol, String, String}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:id, :style), Tuple{String, NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:width, :display, :margin), Tuple{String, String, String}}}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:width, :display, :margin), Tuple{String, String, String}}, Array{DashBase.Component, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:textAlign, :display), Tuple{String, String}}}}}, Type{NamedTuple{(:children,), Tuple{Array{Any, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:textAlign, :display), Tuple{String, String}}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:style, :id), Tuple{NamedTuple{(:width,), Tuple{String}}, String}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:width,), Tuple{String}}, String, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow), Tuple{String, Int64, String, String, String}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:id, :className, :style), Tuple{String, String, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow), Tuple{String, Int64, String, String, String}}}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow), Tuple{String, Int64, String, String, String}}, Array{DashBase.Component, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:width, :padding), Tuple{String, String}}}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:width, :padding), Tuple{String, String}}, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Int64, Int64, Float64, Array{Int64, 1}, Base.Dict{Int64, String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, NamedTuple{(:width,), Tuple{String}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:id, :style), Tuple{String, NamedTuple{(:width,), Tuple{String}}}}}, Type{NamedTuple{(:children,), Tuple{String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, NamedTuple{(:width,), Tuple{String}}, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow, :backgroundColor), Tuple{String, Int64, String, String, String, String}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:id, :className, :style), Tuple{String, String, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow, :backgroundColor), Tuple{String, Int64, String, String, String, String}}}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow, :backgroundColor), Tuple{String, Int64, String, String, String, String}}, Array{DashBase.Component, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Int64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{NamedTuple{(:padding,), Tuple{String}}}}}, Type{NamedTuple{(:children,), Tuple{Array{DashBase.Component, 1}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{NamedTuple{(:padding,), Tuple{String}}, Array{DashBase.Component, 1}}}})
precompile(Tuple{typeof(CovidCountyDash.create_app), DataFrames.DataFrame})
precompile(Tuple{getfield(Dash, Symbol("##dash#24")), Array{String, 1}, Array{Union{Base.Dict{String, String}, String}, 1}, Nothing, Nothing, Nothing, String, String, String, Bool, Bool, Bool, Array{Base.Dict{Symbol, String}, 1}, String, Nothing, Bool, Bool, Bool, typeof(Dash.dash)})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:textAlign,), Tuple{String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, String})
precompile(Tuple{typeof(Base.maximum), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Dates.format), Dates.Date, String})
precompile(Tuple{Type{Dates.DatePart{Char(0x55000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DateFormat{Symbol("U d"), Tuple{Dates.DatePart{Char(0x55000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}, Tuple{Dates.DatePart{Char(0x55000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Dates.format), Dates.Date, Dates.DateFormat{Symbol("U d"), Tuple{Dates.DatePart{Char(0x55000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:height, :lineHeight, :margin), Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, DashBase.Component, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), DashBase.Component, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, DashBase.Component, String, DashBase.Component, String, DashBase.Component}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:width, :margin, :textAlign), Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:width,), Tuple{String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Array{NamedTuple{(:label, :value), Tuple{String, Int64}}, 1}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, DashBase.Component})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Array{DashBase.Component, 1}})
precompile(Tuple{typeof(Base.__cat), Array{DashBase.Component, 1}, Tuple{Int64}, Tuple{Bool}, DashBase.Component, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{DashBase.Component, 1, Array{DashBase.Component, 1}, Tuple{Base.UnitRange{Int64}}, true}, DashBase.Component})
precompile(Tuple{typeof(Base.cat_indices), Array{DashBase.Component, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{DashBase.Component, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{DashBase.Component, 1}, Array{DashBase.Component, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:display,), Tuple{String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Array{NamedTuple{(:label, :value), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(Symbol("padding-left"),), Tuple{String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Int64})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:margin,), Tuple{String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:visibility, :display), Tuple{String, String}}})
precompile(Tuple{Type{Base.Pair{Symbol, Any}}, Any, Any})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:kind,), Tuple{String}}}, Type{NamedTuple{(:x, :y, :customdata, :group, :hovertemplate, :mode), Tuple{Symbol, Symbol, Symbol, Symbol, String, String}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:style,), Tuple{PlotlyBase.Style}}}, Type{NamedTuple{(:x, :y, :customdata, :group, :hovertemplate, :mode), Tuple{Symbol, Symbol, Symbol, Symbol, String, String}}}})
precompile(Tuple{typeof(CovidCountyDash.plotit), DataFrames.DataFrame, String, String, Int64, Array{String, 1}, Array{Any, 1}, Vararg{Array{Any, 1}, N} where N})
precompile(Tuple{typeof(Base.Iterators.partition), Tuple{Array{Any, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CovidCountyDash, Symbol("#18#19")){DataFrames.DataFrame, String, String}, Base.Iterators.PartitionIterator{Tuple{Array{Any, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.PartitionIterator{Tuple{Array{Any, 1}, Array{Any, 1}}}, getfield(CovidCountyDash, Symbol("#18#19")){DataFrames.DataFrame, String, String}}})
precompile(Tuple{Type{NamedTuple{(:type, :roll, :value), T} where T<:Tuple}, Tuple{Symbol, Int64, String}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#precompute##kw")), NamedTuple{(:type, :roll, :value), Tuple{Symbol, Int64, String}}, typeof(CovidCountyDash.precompute), DataFrames.DataFrame, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.reduce), typeof(Base.vcat), Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base.union), Array{String, 1}})
precompile(Tuple{typeof(Base.intersect), Array{String, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Float32, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float32, 1}, 1}, Array{Float32, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Float32, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Float32, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Float32, 1}, 1}, Base.Generator{Array{Array{Float32, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Float32, 1}, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Float32, 1}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Float32}, Int64})
precompile(Tuple{Type{Array{Float32, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{Array{Float32, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float32, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float32, 1}, Int64, Array{Float32, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{String, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{String, 1}, 1}, Array{String, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{String, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{String, 1}, 1}, Base.Generator{Array{Array{String, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{String, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, Array{String, 1}})
precompile(Tuple{typeof(Base.length), Array{Float32, 1}})
precompile(Tuple{typeof(PlotlyBase._layout_defaults)})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.Layout{Base.Dict{Symbol, Any}}, String, Symbol})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.in), Array{Char, 1}}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.Layout{Base.Dict{Symbol, Any}}, String, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Bool, Symbol, Symbol})
precompile(Tuple{typeof(Base.isempty), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.extrema), Array{Dates.Date, 1}})
precompile(Tuple{Type{NamedTuple{(:x, :y, :mode), T} where T<:Tuple}, Tuple{Tuple{Dates.Date, Dates.Date}, Array{Float32, 1}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Dates.Date, Dates.Date}, Array{Float32, 1}, String}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:x, :y, :mode), Tuple{Tuple{Dates.Date, Dates.Date}, Array{Float32, 1}, String}}, Type{PlotlyBase.Plot{TT, TL, TF} where TF<:(AbstractArray{#s21, 1} where #s21<:(PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any})) where TL<:PlotlyBase.AbstractLayout where TT<:(AbstractArray{#s51, 1} where #s51<:PlotlyBase.AbstractTrace)}, DataFrames.DataFrame, PlotlyBase.Layout{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Dates.Date, Dates.Date}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float32, 1}, Symbol})
precompile(Tuple{Type{NamedTuple{(:mode, :y, :x), T} where T<:Tuple}, Tuple{String, Array{Float32, 1}, Tuple{Dates.Date, Dates.Date}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Array{Float32, 1}, Tuple{Dates.Date, Dates.Date}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:mode, :y, :x), Tuple{String, Array{Float32, 1}, Tuple{Dates.Date, Dates.Date}}}, Type{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}}, String})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, Array{Float32, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, Tuple{Dates.Date, Dates.Date}, Symbol})
precompile(Tuple{Type{NamedTuple{(:id, :figure), T} where T<:Tuple}, Tuple{String, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}}})
precompile(Tuple{getfield(DashCoreComponents, Symbol("#dcc_graph##kw")), NamedTuple{(:id, :figure), Tuple{String, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}}, typeof(DashCoreComponents.dcc_graph)})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:width, :display, :margin), Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.vect), DashBase.Component, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{DashBase.Component, String, DashBase.Component, String, DashBase.Component, String, DashBase.Component, String}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:textAlign, :display), Tuple{String, String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow), Tuple{String, Int64, String, String, String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:width, :padding), Tuple{String, String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Float64})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, Base.Dict{Int64, String}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow, :backgroundColor), Tuple{String, Int64, String, String, String, String}}})
precompile(Tuple{typeof(Base.setproperty!), DashBase.Component, Symbol, NamedTuple{(:padding,), Tuple{String}}})
precompile(Tuple{typeof(Base.convert), Type{Array{#s56, 1} where #s56<:(Dash.Dependency{Dash.TraitOutput, IdT} where IdT<:Union{String, NamedTuple{names, T} where T<:Tuple where names})}, Dash.Dependency{Dash.TraitOutput, String}})
precompile(Tuple{typeof(Base.convert), Type{Array{#s55, 1} where #s55<:(Dash.Dependency{Dash.TraitInput, IdT} where IdT<:Union{String, NamedTuple{names, T} where T<:Tuple where names})}, Dash.Dependency{Dash.TraitInput, String}})
precompile(Tuple{typeof(Dash.check_unique), Array{Dash.Dependency{Dash.TraitOutput, String}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Dash.Dependency{Dash.TraitOutput, String}, 1}, Int64})
precompile(Tuple{typeof(Base.any), Function, Base.ValueIterator{Base.Dict{Symbol, Dash.Callback}}})
precompile(Tuple{typeof(Base._any), getfield(Dash, Symbol("#25#26")){Dash.Dependency{Dash.TraitOutput, String}}, Base.ValueIterator{Base.Dict{Symbol, Dash.Callback}}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{Dash.Dependency{Dash.TraitInput, String}, 1}, Int64})
precompile(Tuple{typeof(Base.in), Dash.Dependency{Dash.TraitInput, String}, Array{Dash.Dependency{Dash.TraitOutput, String}, 1}})
precompile(Tuple{typeof(Base.first), Array{Dash.Dependency{Dash.TraitOutput, String}, 1}})
precompile(Tuple{typeof(Dash.check_callback), Function, Dash.DashApp, Dash.CallbackDeps})
precompile(Tuple{typeof(Base.in), Dash.Dependency{Dash.TraitOutput, String}, Array{Dash.Dependency{Dash.TraitOutput, String}, 1}})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Tuple{String, String}}, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{1}, typeof(Base.cat_t), Type{Tuple{String, String}}, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Tuple{String, String}, Tuple{String, String}, Tuple{String, String}, Tuple{String, String}, Array{Tuple{String, String}, 1}}})
precompile(Tuple{typeof(Base.cat_similar), Tuple{String, String}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Tuple{String, String}, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Tuple{String, String}, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Tuple{String, String}, 1, Array{Tuple{String, String}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{String, String}})
precompile(Tuple{typeof(Base.cat_indices), Array{Tuple{String, String}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Tuple{String, String}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{String, String}, 1}, Array{Tuple{String, String}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Dash.Dependency{Dash.TraitInput, IdT} where IdT<:Union{String, NamedTuple{names, T} where T<:Tuple where names}}, String, String})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Base, Symbol("#66#67")){UnionAll}, Tuple{Base.Broadcast.Extruded{Array{Tuple{String, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Dash.Dependency{Dash.TraitInput, String}}})
precompile(Tuple{typeof(Base.setindex!), Array{Dash.Dependency{Dash.TraitInput, String}, 1}, Dash.Dependency{Dash.TraitInput, String}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Dash.Dependency{Dash.TraitInput, String}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(Base, Symbol("#66#67")){UnionAll}, Tuple{Base.Broadcast.Extruded{Array{Tuple{String, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dash.callback!), getfield(CovidCountyDash, Symbol("#33#52")){DataFrames.DataFrame}, Dash.DashApp, Dash.Dependency{Dash.TraitOutput, String}, Array{Dash.Dependency{Dash.TraitInput, String}, 1}})
precompile(Tuple{typeof(Base.get), Array{String, 1}, Int64, String})
precompile(Tuple{typeof(Base.tryparse), Type{Int64}, String})
precompile(Tuple{typeof(Base.something), Nothing, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dash.AppResource}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dash.AppExternalResource}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dash.AppRelativeResource}})
precompile(Tuple{typeof(Dash.run_server), Dash.DashApp, String, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._convert_external), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Dict{String, String}, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Dash.AppExternalResource}})
precompile(Tuple{typeof(Base.setindex!), Array{Dash.AppExternalResource, 1}, Dash.AppExternalResource, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Dash.AppExternalResource, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._convert_external), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Dict{String, String}, String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Dash.AppResource, 1}, Array{Dash.AppExternalResource, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Dash.AppCustomResource, Dash.AppExternalResource}}})
precompile(Tuple{typeof(Base.append!), Array{Dash.AppResource, 1}, Array{Union{Dash.AppCustomResource, Dash.AppExternalResource}, 1}})
precompile(Tuple{typeof(Dash.walk_assets), getfield(Dash, Symbol("#30#34")){Array{Dash.AppResource, 1}, Array{Dash.AppResource, 1}, getfield(Dash, Symbol("#28#32"))}, Dash.DashApp})
precompile(Tuple{typeof(Dash.make_css_tag), Dash.DashApp, Dash.AppExternalResource})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Nothing}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Dash.make_script_tag), Dash.DashApp, Dash.AppRelativeResource})
precompile(Tuple{typeof(Base.__cat), Array{Base.SubString{String}, 1}, Tuple{Int64}, Tuple{Bool}, Array{Base.SubString{String}, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Array{Base.SubString{String}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Base.SubString{String}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.SubString{String}, 1}, Array{Base.SubString{String}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Base.SubString{String}, 1, Array{Base.SubString{String}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubString{String}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.SubString{String}, 1}, Char})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Dash.dependency_tuple), Tuple{Array{Dash.Dependency{Dash.TraitInput, String}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Dash.dependency_tuple), Tuple{Array{Dash.Dependency{Dash.TraitInput, String}, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Dash.dependency_tuple), Tuple{Array{Dash.Dependency{Dash.TraitState, IdT} where IdT<:Union{String, NamedTuple{names, T} where T<:Tuple where names}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Dash.dependency_tuple), Tuple{Array{Dash.Dependency{Dash.TraitState, IdT} where IdT<:Union{String, NamedTuple{names, T} where T<:Tuple where names}, 1}}}})
precompile(Tuple{Type{NamedTuple{(:inputs, :state, :output, :clientside_function), T} where T<:Tuple}, Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Nothing}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:inputs, :state, :output, :clientside_function), Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Nothing}}}, Base.ValueIterator{Base.Dict{Symbol, Dash.Callback}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:inputs, :state, :output, :clientside_function), Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Nothing}}, 1}, NamedTuple{(:inputs, :state, :output, :clientside_function), Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Nothing}}, Base.Generator{Base.ValueIterator{Base.Dict{Symbol, Dash.Callback}}, getfield(Dash, Symbol("#50#51"))}, Int64})
precompile(Tuple{Type{NamedTuple{(:inputs, :state, :output, :clientside_function), T} where T<:Tuple}, Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Dash.ClientsideFunction}})
precompile(Tuple{typeof(Base.allocatedinline), Type{NamedTuple{(:inputs, :state, :output, :clientside_function), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.allocatedinline), Type{NamedTuple{(:inputs, :state, :output, :clientside_function), Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Nothing}}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{NamedTuple{(:inputs, :state, :output, :clientside_function), Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Nothing}}, 1}, NamedTuple{(:inputs, :state, :output, :clientside_function), Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Dash.ClientsideFunction}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{(:inputs, :state, :output, :clientside_function), T} where T<:Tuple, 1}, Base.Generator{Base.ValueIterator{Base.Dict{Symbol, Dash.Callback}}, getfield(Dash, Symbol("#50#51"))}, Int64, Int64})
precompile(Tuple{typeof(JSON2.write), Array{NamedTuple{(:inputs, :state, :output, :clientside_function), T} where T<:Tuple, 1}})
precompile(Tuple{getfield(JSON2, Symbol("##s14#23")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#24#27")){DataType}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#24#27")){DataType}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#25#28")), Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#25#28"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#26#29")){DataType}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}})
precompile(Tuple{typeof(JSON2.getconvert), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{getfield(JSON2, Symbol("#3#4")){DataType}}, Tuple{Int64, Int64, Int64, Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.allocatedinline), Type{getfield(JSON2, Symbol("#3#4")){DataType}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{getfield(JSON2, Symbol("#3#4")){DataType}, 1}, Function, Base.Generator{Tuple{Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Function, 1}, Base.Generator{Tuple{Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64, Int64})
precompile(Tuple{typeof(JSON2.generate_write_body), Int64, Tuple{Int64, Int64, Int64, Int64}, Tuple{String, String, String, String}, Tuple{Bool, Bool, Bool, Bool}, Tuple{getfield(JSON2, Symbol("#3#4")){DataType}, getfield(JSON2, Symbol("#3#4")){DataType}, typeof(Base.string), getfield(JSON2, Symbol("#3#4")){DataType}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(JSON2, Symbol("#18#20"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(JSON2, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(Base.foreach), getfield(JSON2, Symbol("#19#21")){Tuple{Int64, Int64, Int64, Int64}, Tuple{String, String, String, String}, Tuple{Bool, Bool, Bool, Bool}, Tuple{getfield(JSON2, Symbol("#3#4")){DataType}, getfield(JSON2, Symbol("#3#4")){DataType}, typeof(Base.string), getfield(JSON2, Symbol("#3#4")){DataType}}, Expr, Tuple{Symbol, Symbol, Symbol, Symbol}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:inputs, :state, :output, :clientside_function), Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Nothing}}})
precompile(Tuple{typeof(Base.convert), Type{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#24#27")){DataType}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64}, getfield(JSON2, Symbol("#24#27")){DataType}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#25#28")), Tuple{Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64}, getfield(JSON2, Symbol("#25#28"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#26#29")){DataType}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}})
precompile(Tuple{typeof(Base._array_for), Type{typeof(Base.string)}, Tuple{Int64, Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.allocatedinline), Type{typeof(Base.string)}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{typeof(Base.string), 1}, Function, Base.Generator{Tuple{Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64})
precompile(Tuple{typeof(JSON2.generate_write_body), Int64, Tuple{Int64, Int64}, Tuple{String, String}, Tuple{Bool, Bool}, Tuple{typeof(Base.string), typeof(Base.string)}})
precompile(Tuple{typeof(Base.foreach), getfield(JSON2, Symbol("#19#21")){Tuple{Int64, Int64}, Tuple{String, String}, Tuple{Bool, Bool}, Tuple{typeof(Base.string), typeof(Base.string)}, Expr, Tuple{Symbol, Symbol}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:inputs, :state, :output, :clientside_function), Tuple{Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, String, Dash.ClientsideFunction}}})
precompile(Tuple{typeof(Base.convert), Type{Dash.ClientsideFunction}, Dash.ClientsideFunction})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Dash.ClientsideFunction})
precompile(Tuple{typeof(Dash._validate_children), Array{DashBase.Component, 1}, Base.Set{Symbol}})
precompile(Tuple{typeof(Dash._validate_children), Array{Any, 1}, Base.Set{Symbol}})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Function, Nothing, String})
precompile(Tuple{Type{Dash.HttpHelpers.RouteHandler{RT, FT} where FT<:Function where RT<:Dash.HttpHelpers.AbstractRoute}, Dash.HttpHelpers.StaticRoute, typeof(Dash.process_layout)})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Nothing, Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_layout)}})
precompile(Tuple{Type{Dash.HttpHelpers.RouteHandler{RT, FT} where FT<:Function where RT<:Dash.HttpHelpers.AbstractRoute}, Dash.HttpHelpers.StaticRoute, typeof(Dash.process_dependencies)})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Nothing, Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_dependencies)}})
precompile(Tuple{Type{Dash.HttpHelpers.RouteHandler{RT, FT} where FT<:Function where RT<:Dash.HttpHelpers.AbstractRoute}, Dash.HttpHelpers.StaticRoute, typeof(Dash.process_reload_hash)})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Nothing, Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_reload_hash)}})
precompile(Tuple{Type{NamedTuple{(:path, :namespace), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Dash.HttpHelpers.DynamicRoute{ST, VT} where VT where ST}, Int64, Tuple{Tuple{Int64, String}}, NamedTuple{(:path, :namespace), Tuple{Int64, Int64}}, Bool})
precompile(Tuple{Type{Dash.HttpHelpers.RouteHandler{RT, FT} where FT<:Function where RT<:Dash.HttpHelpers.AbstractRoute}, Dash.HttpHelpers.DynamicRoute{Tuple{Tuple{Int64, String}}, NamedTuple{(:path, :namespace), Tuple{Int64, Int64}}}, typeof(Dash.process_resource)})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Nothing, Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.DynamicRoute{Tuple{Tuple{Int64, String}}, NamedTuple{(:path, :namespace), Tuple{Int64, Int64}}}, typeof(Dash.process_resource)}})
precompile(Tuple{Type{NamedTuple{(:file_path,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{Dash.HttpHelpers.DynamicRoute{ST, VT} where VT where ST}, Int64, Tuple{Tuple{Int64, String}}, NamedTuple{(:file_path,), Tuple{Int64}}, Bool})
precompile(Tuple{Type{Dash.HttpHelpers.RouteHandler{RT, FT} where FT<:Function where RT<:Dash.HttpHelpers.AbstractRoute}, Dash.HttpHelpers.DynamicRoute{Tuple{Tuple{Int64, String}}, NamedTuple{(:file_path,), Tuple{Int64}}}, typeof(Dash.process_assets)})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Nothing, Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.DynamicRoute{Tuple{Tuple{Int64, String}}, NamedTuple{(:file_path,), Tuple{Int64}}}, typeof(Dash.process_assets)}})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Function, String, String})
precompile(Tuple{Type{Dash.HttpHelpers.RouteHandler{RT, FT} where FT<:Function where RT<:Dash.HttpHelpers.AbstractRoute}, Dash.HttpHelpers.StaticRoute, typeof(Dash.process_callback)})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, String, Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_callback)}})
precompile(Tuple{Type{Dash.HttpHelpers.DynamicRoute{ST, VT} where VT where ST}, Int64, Tuple{}, NamedTuple{(), Tuple{}}, Bool})
precompile(Tuple{Type{Dash.HttpHelpers.RouteHandler{RT, FT} where FT<:Function where RT<:Dash.HttpHelpers.AbstractRoute}, Dash.HttpHelpers.DynamicRoute{Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dash.process_index)})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Nothing, Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.DynamicRoute{Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dash.process_index)}})
precompile(Tuple{Type{Dash.HttpHelpers.RouteHandler{RT, FT} where FT<:Function where RT<:Dash.HttpHelpers.AbstractRoute}, Dash.HttpHelpers.StaticRoute, typeof(Dash.process_index)})
precompile(Tuple{Type{Dash.HttpHelpers.Route{RH} where RH}, Nothing, Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_index)}})
precompile(Tuple{typeof(Base.allocatedinline), Type{CodecZlib.ZStream}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(HTTP.Handlers.handle), HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#4#5")){Array{String, 1}, Int64, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#7#8")){getfield(Dash, Symbol("#65#67")){Dash.DashApp}, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#1#2")){Dash.HttpHelpers.Router, Dash.HandlerState}}}}}}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dash.ChangedAsset}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Base.Dict{String, Any}}, Base.Pair{Symbol, Bool}}}})
precompile(Tuple{typeof(Core.Compiler.iterate), NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Dash.HttpHelpers.handle), Tuple{Dash.HttpHelpers.Route{Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_layout)}}, Dash.HttpHelpers.Route{Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_dependencies)}}, Dash.HttpHelpers.Route{Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_reload_hash)}}, Dash.HttpHelpers.Route{Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.DynamicRoute{Tuple{Tuple{Int64, String}}, NamedTuple{(:path, :namespace), Tuple{Int64, Int64}}}, typeof(Dash.process_resource)}}, Dash.HttpHelpers.Route{Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.DynamicRoute{Tuple{Tuple{Int64, String}}, NamedTuple{(:file_path,), Tuple{Int64}}}, typeof(Dash.process_assets)}}, Dash.HttpHelpers.Route{Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_callback)}}, Dash.HttpHelpers.Route{Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.DynamicRoute{Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dash.process_index)}}, Dash.HttpHelpers.Route{Dash.HttpHelpers.RouteHandler{Dash.HttpHelpers.StaticRoute, typeof(Dash.process_index)}}}, Base.SubString{String}, HTTP.Messages.Request, Dash.HandlerState})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.HTMLSig, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.length), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.CodeUnits{UInt8, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.CodeUnits{UInt8, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(<=)), UInt8, UInt8})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.CodeUnits{UInt8, String}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.in), UInt8, Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(HTTP.contenttype), HTTP.HTMLSig})
precompile(Tuple{typeof(Base.wait), Task})
precompile(Tuple{getfield(Dash, Symbol("#70#72")){HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#4#5")){Array{String, 1}, Int64, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#7#8")){getfield(Dash, Symbol("#65#67")){Dash.DashApp}, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#1#2")){Dash.HttpHelpers.Router, Dash.HandlerState}}}}}}, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:server, :verbose), T} where T<:Tuple}, Tuple{Sockets.TCPServer, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Sockets.TCPServer, Bool}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP.Handlers, Symbol("#serve##kw")), NamedTuple{(:server, :verbose), Tuple{Sockets.TCPServer, Bool}}, typeof(HTTP.Handlers.serve), HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#4#5")){Array{String, 1}, Int64, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#7#8")){getfield(Dash, Symbol("#65#67")){Dash.DashApp}, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#1#2")){Dash.HttpHelpers.Router, Dash.HandlerState}}}}}}, String, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#4#5")){Array{String, 1}, Int64, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#7#8")){getfield(Dash, Symbol("#65#67")){Dash.DashApp}, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#1#2")){Dash.HttpHelpers.Router, Dash.HandlerState}}}}}}}, String, Int64})
precompile(Tuple{typeof(HTTP.Servers.listenloop), Function, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, getfield(HTTP.Servers, Symbol("#2#5")){Nothing, getfield(HTTP.Servers, Symbol("#4#7"))}, Base.RefValue{Int64}, Int64, Int64, Bool})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#8#9")){getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#4#5")){Array{String, 1}, Int64, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#7#8")){getfield(Dash, Symbol("#65#67")){Dash.DashApp}, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#1#2")){Dash.HttpHelpers.Router, Dash.HandlerState}}}}}}}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Base.RefValue{Int64}, Int64, Int64, Bool, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.Servers.handle_connection), Function, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, Int64, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##handle_transaction#12")), Bool, typeof(HTTP.Servers.handle_transaction), getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#4#5")){Array{String, 1}, Int64, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#7#8")){getfield(Dash, Symbol("#65#67")){Dash.DashApp}, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#1#2")){Dash.HttpHelpers.Router, Dash.HandlerState}}}}}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Servers.Server{Nothing, Sockets.TCPServer}})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Function, Int64})
precompile(Tuple{getfield(HTTP.Servers, Symbol("#13#14")){getfield(HTTP.Handlers, Symbol("#4#5")){HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#4#5")){Array{String, 1}, Int64, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#7#8")){getfield(Dash, Symbol("#65#67")){Dash.DashApp}, HTTP.Handlers.RequestHandlerFunction{getfield(Dash.HttpHelpers, Symbol("#1#2")){Dash.HttpHelpers.Router, Dash.HandlerState}}}}}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Streams.Stream{HTTP.Messages.Request, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Int16})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#14#15")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{Type{NamedTuple{(:exception,), T} where T<:Tuple}, Tuple{Tuple{Base.IOError, Array{Base.StackTraces.StackFrame, 1}}}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#handle_message##kw")), NamedTuple{(:exception,), Tuple{Tuple{Base.IOError, Array{Base.StackTraces.StackFrame, 1}}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.IOError}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{getfield(Base, Symbol("#show_trace_entry##kw")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.show_trace_entry), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.show_tuple_as_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Type{T} where T, Bool})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.Masked, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{UInt8, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.CodeUnits{UInt8, String}, Int64})
precompile(Tuple{typeof(HTTP.ismatch), HTTP.Exact, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.MP4Sig}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.JSONSig}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(HTTP.ismatch), Type{HTTP.TextSig}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(HTTP.contenttype), Type{HTTP.TextSig}})
precompile(Tuple{typeof(Dash.layout_data), DashBase.Component})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:name,), Tuple{NamedTuple{(:exclude,), Tuple{Bool}}}}}, Type{NamedTuple{(:available_props,), Tuple{NamedTuple{(:exclude,), Tuple{Bool}}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:name, :available_props), Tuple{NamedTuple{(:exclude,), Tuple{Bool}}, NamedTuple{(:exclude,), Tuple{Bool}}}}}, Type{NamedTuple{(:wildcard_regex,), Tuple{NamedTuple{(:exclude,), Tuple{Bool}}}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{NamedTuple{names, T} where T<:Tuple where names}})
precompile(Tuple{typeof(Base.allocatedinline), Type{NamedTuple{(:exclude,), Tuple{Bool}}}})
precompile(Tuple{getfield(DashBase, Symbol("##s17#10")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DashBase, Symbol("#11#20")), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, getfield(DashBase, Symbol("#11#20"))}})
precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:exclude,), Tuple{Bool}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{(:exclude,), Tuple{Bool}}, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, getfield(DashBase, Symbol("#11#20"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{names, T} where T<:Tuple where names, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, getfield(DashBase, Symbol("#11#20"))}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{NamedTuple{names, T} where T<:Tuple where names, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(DashBase, Symbol("#12#21")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{getfield(DashBase, Symbol("#12#21")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.Iterators.Filter{getfield(DashBase, Symbol("#12#21")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}, Base.UnitRange{Int64}}, typeof(Base.identity)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DashBase, Symbol("#13#22")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(DashBase, Symbol("#13#22")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Tuple{Int64, Int64, Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(DashBase, Symbol("#13#22")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DashBase, Symbol("#14#23")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(DashBase, Symbol("#14#23")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}}})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Tuple{Int64, Int64, Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(DashBase, Symbol("#14#23")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DashBase, Symbol("#15#24")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(DashBase, Symbol("#15#24")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}}})
precompile(Tuple{typeof(Base._array_for), Type{typeof(Base.string)}, Tuple{Int64, Int64, Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{typeof(Base.string), 1}, Function, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(DashBase, Symbol("#15#24")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{typeof(Base.string), 1}, Function, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Int64, Array{typeof(Base.string), 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Function, 1}, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(DashBase, Symbol("#15#24")){Array{NamedTuple{names, T} where T<:Tuple where names, 1}}}, Int64, Int64})
precompile(Tuple{typeof(JSON2.generate_write_body), Int64, Tuple{Int64, Int64, Int64}, Tuple{String, String, String}, Tuple{Bool, Bool, Bool}, Tuple{typeof(Base.string), typeof(Base.string), getfield(JSON2, Symbol("#3#4")){DataType}}})
precompile(Tuple{typeof(Base.foreach), getfield(JSON2, Symbol("#19#21")){Tuple{Int64, Int64, Int64}, Tuple{String, String, String}, Tuple{Bool, Bool, Bool}, Tuple{typeof(Base.string), typeof(Base.string), getfield(JSON2, Symbol("#3#4")){DataType}}, Expr, Tuple{Symbol, Symbol, Symbol}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSON2.write), DashBase.Component})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{DashBase.Component, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#24#27")){DataType}, Tuple{Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64}, getfield(JSON2, Symbol("#24#27")){DataType}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#25#28")), Tuple{Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64}, getfield(JSON2, Symbol("#25#28"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#26#29")){DataType}, Tuple{Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}})
precompile(Tuple{typeof(Base._array_for), Type{typeof(Base.string)}, Tuple{Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{typeof(Base.string), 1}, Function, Base.Generator{Tuple{Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64})
precompile(Tuple{typeof(JSON2.generate_write_body), Int64, Tuple{Int64}, Tuple{String}, Tuple{Bool}, Tuple{typeof(Base.string)}})
precompile(Tuple{typeof(Base.foreach), getfield(JSON2, Symbol("#19#21")){Tuple{Int64}, Tuple{String}, Tuple{Bool}, Tuple{typeof(Base.string)}, Expr, Tuple{Symbol}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:textAlign,), Tuple{String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, DashBase.Component})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#24#27")){DataType}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(JSON2, Symbol("#24#27")){DataType}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#25#28")), Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(JSON2, Symbol("#25#28"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#26#29")){DataType}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{typeof(Base.string), 1}, Function, Base.Generator{Tuple{Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64})
precompile(Tuple{typeof(JSON2.generate_write_body), Int64, Tuple{Int64, Int64, Int64}, Tuple{String, String, String}, Tuple{Bool, Bool, Bool}, Tuple{typeof(Base.string), typeof(Base.string), typeof(Base.string)}})
precompile(Tuple{typeof(Base.foreach), getfield(JSON2, Symbol("#19#21")){Tuple{Int64, Int64, Int64}, Tuple{String, String, String}, Tuple{Bool, Bool, Bool}, Tuple{typeof(Base.string), typeof(Base.string), typeof(Base.string)}, Expr, Tuple{Symbol, Symbol, Symbol}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:height, :lineHeight, :margin), Tuple{String, String, String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:width, :margin, :textAlign), Tuple{String, String, String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:width,), Tuple{String}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Function, 1}, Base.Generator{Tuple{Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64, Int64})
precompile(Tuple{typeof(JSON2.generate_write_body), Int64, Tuple{Int64, Int64}, Tuple{String, String}, Tuple{Bool, Bool}, Tuple{typeof(Base.string), getfield(JSON2, Symbol("#1#2")){Int64}}})
precompile(Tuple{typeof(Base.foreach), getfield(JSON2, Symbol("#19#21")){Tuple{Int64, Int64}, Tuple{String, String}, Tuple{Bool, Bool}, Tuple{typeof(Base.string), getfield(JSON2, Symbol("#1#2")){Int64}}, Expr, Tuple{Symbol, Symbol}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{NamedTuple{(:label, :value), Tuple{String, Int64}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:display,), Tuple{String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{NamedTuple{(:label, :value), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:margin,), Tuple{String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(Symbol("padding-left"),), Tuple{String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:visibility, :display), Tuple{String, String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}}, Base.Pair{Symbol, PlotlyBase.Layout{Base.Dict{Symbol, Any}}}, Base.Pair{Symbol, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.isempty), PlotlyBase.Layout{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.getindex), PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Symbol})
precompile(Tuple{typeof(Base.merge), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Int64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.isempty), PlotlyBase.PlotlyAttribute{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}}, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}}, Tuple{Base.Pair{Symbol, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}}, Base.Pair{Symbol, PlotlyBase.Layout{Base.Dict{Symbol, Any}}}, Base.Pair{Symbol, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}}, Base.Pair{Symbol, PlotlyBase.Layout{Base.Dict{Symbol, Any}}}, Base.Pair{Symbol, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, PlotlyBase.Layout{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Bool})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{Float32, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Tuple{Dates.Date, Dates.Date}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:width, :display, :margin), Tuple{String, String, String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:textAlign, :display), Tuple{String, String}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#24#27")){DataType}, Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#24#27")){DataType}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#25#28")), Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#25#28"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#26#29")){DataType}, Tuple{Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}})
precompile(Tuple{typeof(Base._array_for), Type{typeof(Base.string)}, Tuple{Int64, Int64, Int64, Int64, Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{typeof(Base.string), 1}, Function, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Function, 1}, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64, Int64})
precompile(Tuple{typeof(JSON2.generate_write_body), Int64, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{String, String, String, String, String}, Tuple{Bool, Bool, Bool, Bool, Bool}, Tuple{typeof(Base.string), getfield(JSON2, Symbol("#1#2")){Int64}, typeof(Base.string), typeof(Base.string), typeof(Base.string)}})
precompile(Tuple{typeof(Base.foreach), getfield(JSON2, Symbol("#19#21")){Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{String, String, String, String, String}, Tuple{Bool, Bool, Bool, Bool, Bool}, Tuple{typeof(Base.string), getfield(JSON2, Symbol("#1#2")){Int64}, typeof(Base.string), typeof(Base.string), typeof(Base.string)}, Expr, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow), Tuple{String, Int64, String, String, String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:width, :padding), Tuple{String, String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Int64, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#24#27")){DataType}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#24#27")){DataType}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#25#28")), Tuple{Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#25#28"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(JSON2, Symbol("#26#29")){DataType}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}})
precompile(Tuple{typeof(Base._array_for), Type{typeof(Base.string)}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{typeof(Base.string), 1}, Function, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Function, 1}, Base.Generator{Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, getfield(JSON2, Symbol("#26#29")){DataType}}, Int64, Int64})
precompile(Tuple{typeof(JSON2.generate_write_body), Int64, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{String, String, String, String, String, String}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{typeof(Base.string), getfield(JSON2, Symbol("#1#2")){Int64}, typeof(Base.string), typeof(Base.string), typeof(Base.string), typeof(Base.string)}})
precompile(Tuple{typeof(Base.foreach), getfield(JSON2, Symbol("#19#21")){Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{String, String, String, String, String, String}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{typeof(Base.string), getfield(JSON2, Symbol("#1#2")){Int64}, typeof(Base.string), typeof(Base.string), typeof(Base.string), typeof(Base.string)}, Expr, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:display, :zIndex, :position, :border, :boxShadow, :backgroundColor), Tuple{String, Int64, String, String, String, String}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, NamedTuple{(:padding,), Tuple{String}}})
precompile(Tuple{typeof(HTTP.ignorewhitespace), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(HTTP.restofstring), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(HTTP.contenttype), Type{HTTP.JSONSig}})
precompile(Tuple{typeof(Base.getproperty), Dash.HandlerState, Symbol})
precompile(Tuple{Type{NamedTuple{(:id, :property), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{Type{NamedTuple{(:output, :outputs, :inputs, :changedPropIds), T} where T<:Tuple}, Tuple{String, NamedTuple{(:id, :property), Tuple{String, String}}, Array{Any, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.get), NamedTuple{(:output, :outputs, :inputs, :changedPropIds), Tuple{String, NamedTuple{(:id, :property), Tuple{String, String}}, Array{Any, 1}, Array{Any, 1}}}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:output, :outputs, :inputs, :changedPropIds), Tuple{String, NamedTuple{(:id, :property), Tuple{String, String}}, Array{Any, 1}, Array{Any, 1}}}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{NamedTuple{(:id, :property), Tuple{Base.SubString{String}, Base.SubString{String}}}}})
precompile(Tuple{typeof(Dash.split_callback_id), String})
precompile(Tuple{typeof(Base.get), NamedTuple{(:output, :outputs, :inputs, :changedPropIds), Tuple{String, NamedTuple{(:id, :property), Tuple{String, String}}, Array{Any, 1}, Array{Any, 1}}}, Symbol, Array{NamedTuple{(:id, :property), Tuple{Base.SubString{String}, Base.SubString{String}}}, 1}})
precompile(Tuple{typeof(Dash.outputs_to_vector), NamedTuple{(:id, :property), Tuple{String, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{NamedTuple{(:id, :property), Tuple{String, String}}}})
precompile(Tuple{Type{Dash.CallbackContext}, HTTP.Messages.Response, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Dash._item_to_dict!), Base.Dict{String, Any}, NamedTuple{(:id, :property), Tuple{String, String}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dash.Contexts.with_context), Function, Dash.Contexts.TaskContextStorage, Dash.CallbackContext})
precompile(Tuple{typeof(Dash.Contexts.with_context), getfield(Dash, Symbol("#53#54")){Dash.DashApp, Array{Any, 1}, Symbol, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}}, Dash.Contexts.TaskContextStorage, Dash.Contexts.ContextItem{Dash.CallbackContext}})
precompile(Tuple{typeof(Dash.process_callback_call), Dash.DashApp, Symbol, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Nothing, 1}, Array{Any, 1}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#27#44")), Nothing, Vararg{Nothing, N} where N})
precompile(Tuple{typeof(Dash._single_element_vect), Array{Any, 1}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{Array{Any, 1}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{Array{Any, 1}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{String, Any}}, Base.Dict{String, Any}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Base.Dict{String, Any}}, Tuple{Base.Pair{Symbol, Base.Dict{String, Any}}, Base.Pair{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Base.Dict{String, Any}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Base.Dict{String, Any}}, Base.Pair{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(JSON2.write), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Array{Any, 1}}})
precompile(Tuple{typeof(Base.rethrow), Base.IOError})
precompile(Tuple{Type{NamedTuple{(:id, :property, :value), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{typeof(Dash._item_to_dict!), Base.Dict{String, Any}, NamedTuple{(:id, :property, :value), Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dash.input_to_arg), NamedTuple{(:id, :property, :value), Tuple{String, String, String}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{Any, 1}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#36#55")), String})
precompile(Tuple{typeof(Dash._single_element_vect), Array{NamedTuple{(:label, :value), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{Array{NamedTuple{(:label, :value), Tuple{String, String}}, 1}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{Array{NamedTuple{(:label, :value), Tuple{String, String}}, 1}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Array{NamedTuple{(:label, :value), Tuple{String, String}}, 1}}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#37#56")), String})
precompile(Tuple{typeof(Dash._single_element_vect), NamedTuple{(:visibility, :display), Tuple{String, String}}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:visibility, :display), Tuple{String, String}}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{NamedTuple{(:visibility, :display), Tuple{String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, NamedTuple{(:visibility, :display), Tuple{String, String}}}})
precompile(Tuple{Type{NamedTuple{(:id, :property, :value), T} where T<:Tuple}, Tuple{String, String, Array{Any, 1}}})
precompile(Tuple{typeof(Dash._item_to_dict!), Base.Dict{String, Any}, NamedTuple{(:id, :property, :value), Tuple{String, String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Any, 1}, 1}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Array{Any, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:prop_id, :value), T} where T<:Tuple}, Tuple{String, Array{Any, 1}}})
precompile(Tuple{typeof(Dash.input_to_arg), NamedTuple{(:id, :property, :value), Tuple{String, String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Array{Any, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Array{Any, 1}, 1}, Array{Any, 1}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#hide_missing_row#48")), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Dash._single_element_vect), NamedTuple{(:display,), Tuple{String}}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:display,), Tuple{String}}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{NamedTuple{(:display,), Tuple{String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, NamedTuple{(:display,), Tuple{String}}}})
precompile(Tuple{typeof(CovidCountyDash.counties), Array{Any, 1}})
precompile(Tuple{typeof(Base.similar), Array{Array{Any, 1}, 1}, Type{T} where T})
precompile(Tuple{Type{Array{Union{Nothing, Array{Any, 1}}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, Array{Any, 1}}, 1}, Array{Array{Any, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Array{Any, 1}}, 1}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, Array{Any, 1}}, 1}, Array{Array{Any, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Union{Nothing, Array{Any, 1}}, 1}, Array{Any, 1}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#29#46")), Array{Any, 1}, Nothing, Array{Any, 1}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#31#50")){getfield(CovidCountyDash, Symbol("#contains_footnote#49")), Char}, Array{Any, 1}, Vararg{Array{Any, 1}, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(CovidCountyDash, Symbol("#contains_footnote#49")), Tuple{Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Array{Char, 0}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, getfield(CovidCountyDash, Symbol("#contains_footnote#49")), Tuple{Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Array{Char, 0}}}})
precompile(Tuple{typeof(Base.any), Tuple{Bool, Bool, Bool, Bool, Bool, Bool}})
precompile(Tuple{typeof(Dash._single_element_vect), NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, NamedTuple{(:textAlign, :display, :fontSize), Tuple{String, String, String}}}})
precompile(Tuple{Type{NamedTuple{(:id, :property, :value), T} where T<:Tuple}, Tuple{String, String, Int64}})
precompile(Tuple{typeof(Dash._item_to_dict!), Base.Dict{String, Any}, NamedTuple{(:id, :property, :value), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.similar), Array{String, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Dash.input_to_arg), NamedTuple{(:id, :property, :value), Tuple{String, String, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#33#52")){DataFrames.DataFrame}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(CovidCountyDash.plotit), DataFrames.DataFrame, String, String, Int64, Array{Any, 1}, Array{Any, 1}, Vararg{Array{Any, 1}, N} where N})
precompile(Tuple{typeof(Base.Iterators.partition), Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CovidCountyDash, Symbol("#18#19")){DataFrames.DataFrame, String, String}, Base.Iterators.PartitionIterator{Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.PartitionIterator{Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}}, getfield(CovidCountyDash, Symbol("#18#19")){DataFrames.DataFrame, String, String}}})
precompile(Tuple{typeof(Dash._single_element_vect), PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}})
precompile(Tuple{typeof(HTTP.ignorewhitespace), Array{UInt8, 1}, UInt64, Int64})
precompile(Tuple{typeof(HTTP.restofstring), Array{UInt8, 1}, UInt64, Int64})
precompile(Tuple{typeof(HTTP.isjson), Array{UInt8, 1}, UInt64, Int64})
precompile(Tuple{typeof(Base.haskey), OrderedCollections.OrderedDict{Int64, OrderedCollections.OrderedDict{Int64, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{Int64, OrderedCollections.OrderedDict{Int64, String}}, Int64})
precompile(Tuple{typeof(Dash._single_element_vect), Array{NamedTuple{(:label, :value), Tuple{String, Int64}}, 1}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{Array{NamedTuple{(:label, :value), Tuple{String, Int64}}, 1}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{Array{NamedTuple{(:label, :value), Tuple{String, Int64}}, 1}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Array{NamedTuple{(:label, :value), Tuple{String, Int64}}, 1}}})
precompile(Tuple{typeof(Base.push!), Base.BitSet, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Int64, getfield(DataFrames, Symbol("#81#83")){DataFrames.DataFrame}}})
precompile(Tuple{typeof(DataFrames._filter_helper), Function, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(DataFrames, Symbol("#89#90")){Base.Fix2{typeof(Base.in), Base.BitSet}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(DataFrames, Symbol("#89#90")){Base.Fix2{typeof(Base.in), Base.BitSet}}, Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.convert), Type{Base.BitArray{1}}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.allunique), Array{Int64, 1}})
precompile(Tuple{typeof(Base.ntuple), getfield(DataFrames, Symbol("#271#272")){DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.view), Array{Dates.Date, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool})
precompile(Tuple{typeof(Base.allunique), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("#29#30")){DataFrames.Index}}})
precompile(Tuple{getfield(DataFrames, Symbol("##sortperm#612")), Nothing, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Array{Any, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple where O<:Union{Base.Order.Ordering, AbstractArray{T, 1} where T}}, Base.Order.ForwardOrdering, Tuple{Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{getfield(Base.Sort, Symbol("#defalg##kw")), NamedTuple{(:alg, :cols), Tuple{Nothing, Array{Any, 1}}}, typeof(Base.Sort.defalg), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(DataFrames._sortperm), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}, Array{Int64, 1}}, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(DataFrames, Symbol("#combine##kw")), NamedTuple{(:renamecols,), Tuple{Bool}}, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, Base.Pair{Symbol, typeof(Base.sum)}, Base.Pair{Symbol, typeof(Base.sum)}})
precompile(Tuple{getfield(DataFrames, Symbol("##_combine_prepare#473")), Bool, Bool, Bool, Bool, Bool, typeof(DataFrames._combine_prepare), DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, Union{Base.Regex, AbstractString, Function, Signed, Symbol, Unsigned, Base.Pair{A, B} where B where A, AbstractArray{T, 1} where T, Type, DataAPI.All{T} where T<:Tuple, DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}, DataAPI.Cols{T} where T<:Tuple, InvertedIndices.InvertedIndex{S} where S}, Vararg{Union{Base.Regex, AbstractString, Function, Signed, Symbol, Unsigned, Base.Pair{A, B} where B where A, AbstractArray{T, 1} where T, Type, DataAPI.All{T} where T<:Tuple, DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}, DataAPI.Cols{T} where T<:Tuple, InvertedIndices.InvertedIndex{S} where S}, N} where N})
precompile(Tuple{typeof(DataFrames.normalize_selection), DataFrames.Index, Base.Pair{Symbol, typeof(Base.sum)}, Bool})
precompile(Tuple{getfield(DataFrames, Symbol("#499#503")){DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}}, Base.Pair{Int64, Base.Pair{typeof(Base.sum), Symbol}}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.fillfirst!), Nothing, Array{Int64, 1}, Base.UnitRange{Int64}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames._combine_process_agg), Base.Pair{Int64, #s151} where #s151<:(Base.Pair{#s150, Symbol} where #s150<:Function), Bool, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}, Array{Int64, 1}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{Type{DataFrames.TransformationResult}, Array{Int64, 1}, Array{Int64, 1}, Symbol, Bool})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.add_sum), Nothing, Nothing}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, DataFrames.GroupedDataFrame{DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}}})
precompile(Tuple{typeof(DataFrames.copyto_widen!), Array{Int64, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#502#506")){Array{AbstractArray{T, 1} where T, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, Array{Int64, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Dates.Date, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._shrink), Function, Array{Symbol, 1}, Tuple{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#89#90")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base._shrink), Function, Base.UnitRange{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#89#90")){typeof(Base.in), typeof(Base.pop!), Base.Set{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#hcat!##kw")), NamedTuple{(:makeunique, :copycols), Tuple{Bool, Bool}}, typeof(DataFrames.hcat!), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.view), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sum), Base.SubArray{Union{Base.Missing, Int64}, 1, SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.diff), Array{Int64, 1}})
precompile(Tuple{typeof(CovidCountyDash.rolling), typeof(Statistics.mean), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Float32, Array{Float32, 1}})
precompile(Tuple{typeof(Base.__cat), Array{Float32, 1}, Tuple{Int64}, Tuple{Bool}, Float32, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Base.UnitRange{Int64}}, true}, Float32})
precompile(Tuple{typeof(Base.cat_indices), Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float32, 1}, Array{Float32, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.coalesce), Int64, Float32})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float32, 1}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float32, 1}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float32, 1}, Float32}}})
precompile(Tuple{typeof(CovidCountyDash.labelname), Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CovidCountyDash.labelname), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CovidCountyDash.labelname), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Float32, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Float64}, Tuple{Array{Float32, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Float64}, Tuple{Array{Float32, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{Float64}, Tuple{Array{Float32, 1}}}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{Type{NamedTuple{(:values, :popvalues, :dates, :location), T} where T<:Tuple}, Tuple{Array{Float32, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float32, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, String}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:values, :popvalues, :dates, :location), Tuple{Array{Float32, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, String}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.copy), Array{Float32, 1}})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{typeof(Base.copy), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.fill!), Array{String, 1}, String})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{AbstractArray{T, 1} where T, 1}, Int64, Array{Any, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Float64, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Float64, 1}, 1}, Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#128#132")){String}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{T, 1} where T, 1}, Base.Generator{Array{Array{T, 1} where T, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Float64}, Int64})
precompile(Tuple{typeof(Base.length), Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float32, 1}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:x, :y, :customdata, :group, :hovertemplate, :mode), Tuple{Symbol, Symbol, Symbol, Symbol, String, String}}, Type{PlotlyBase.Plot{TT, TL, TF} where TF<:(AbstractArray{#s21, 1} where #s21<:(PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any})) where TL<:PlotlyBase.AbstractLayout where TT<:(AbstractArray{#s51, 1} where #s51<:PlotlyBase.AbstractTrace)}, DataFrames.DataFrame, PlotlyBase.Layout{Base.Dict{Symbol, Any}}})
precompile(Tuple{getfield(PlotlyBase, Symbol("##GenericTrace#214")), Symbol, String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :customdata, :hovertemplate, :mode), Tuple{Symbol, Symbol, Symbol, String, String}}}, Type{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}}, DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{String, 1}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool})
precompile(Tuple{typeof(Base.lock), getfield(DataFrames, Symbol("#273#276")){DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Symbol}, Base.ReentrantLock})
precompile(Tuple{typeof(DataFrames.compute_indices), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:kind, :name), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:kind, :name), Tuple{String, String}}}, Type{NamedTuple{(:x, :y, :customdata, :hovertemplate, :mode), Tuple{Symbol, Symbol, Symbol, String, String}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:kind, :name), Tuple{String, String}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :customdata, :hovertemplate, :mode), Tuple{Symbol, Symbol, Symbol, String, String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Symbol, Symbol, Symbol, String, String}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:kind, :name, :x, :y, :customdata, :hovertemplate, :mode), Tuple{String, String, Symbol, Symbol, Symbol, String, String}}, Type{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}}, DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Symbol})
precompile(Tuple{typeof(Base.view), Array{Float32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}, Symbol})
precompile(Tuple{Type{NamedTuple{(:mode, :y, :name, :customdata, :hovertemplate, :x), T} where T<:Tuple}, Tuple{String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:mode, :y, :name, :customdata, :hovertemplate, :x), Tuple{String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}}, Type{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}}, String})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Symbol})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, Symbol})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, Base.Generator{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, getfield(PlotlyBase, Symbol("#215#216")){Symbol, String, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:x, :y, :customdata, :hovertemplate, :mode), Tuple{Symbol, Symbol, Symbol, String, String}}}}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}}, Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, 1}, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:style,), Tuple{PlotlyBase.Style}}, Type{PlotlyBase.Plot{TT, TL, TF} where TF<:(AbstractArray{#s21, 1} where #s21<:(PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any})) where TL<:PlotlyBase.AbstractLayout where TT<:(AbstractArray{#s51, 1} where #s51<:PlotlyBase.AbstractTrace)}, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Dash._single_element_vect), PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, Base.Pair{Symbol, PlotlyBase.Layout{Base.Dict{Symbol, Any}}}, Base.Pair{Symbol, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, PlotlyBase.Plot{Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, PlotlyBase.Layout{Base.Dict{Symbol, Any}}, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, Tuple{Base.Pair{Symbol, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, Base.Pair{Symbol, PlotlyBase.Layout{Base.Dict{Symbol, Any}}}, Base.Pair{Symbol, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Base.Pair{Symbol, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}, Base.Pair{Symbol, PlotlyBase.Layout{Base.Dict{Symbol, Any}}}, Base.Pair{Symbol, Array{PlotlyBase.PlotlyFrame{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{Type{NamedTuple{(:label, :value), T} where T<:Tuple}, Tuple{String, Int64}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Array{Any, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:prop_id, :value), T} where T<:Tuple}, Tuple{String, Int64}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Array{Any, 1}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#29#46")), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.getproperty), Dash.CallbackContext, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CovidCountyDash, Symbol("#30#47")), Array{NamedTuple{(:prop_id, :value), T} where T<:Tuple, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{NamedTuple{(:prop_id, :value), T} where T<:Tuple, 1}, getfield(CovidCountyDash, Symbol("#30#47"))}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{NamedTuple{(:prop_id, :value), T} where T<:Tuple, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{NamedTuple{(:prop_id, :value), T} where T<:Tuple, 1}, getfield(CovidCountyDash, Symbol("#30#47"))}, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:label, :value), Tuple{String, Int64}}, Symbol})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.getproperty), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), SentinelArrays.SentinelArray{String, 1, UndefInitializer, Base.Missing, Array{String, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.skipmissing), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Statistics.quantile), Base.SkipMissing{Array{Union{Base.Missing, Int64}, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Float64, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Float64, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Float64, Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Bool}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Float64, Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.BitArray{1}, Type{Union{Base.Missing, Bool}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Union{Base.Missing, Int64}, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Array{Union{Base.Missing, Bool}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Float64}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}}}, Type{Bool}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(&)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Bool}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Union{Base.Missing, Int64}, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Union{Base.Missing, Bool}, 1}, Bool})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.coalesce), Tuple{Array{Union{Base.Missing, Bool}, 1}, Bool}}})
precompile(Tuple{typeof(Dash._single_element_vect), Array{Int64, 1}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{Array{Int64, 1}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{Array{Int64, 1}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Array{Int64, 1}, Type{T} where T})
precompile(Tuple{Type{Array{Union{Nothing, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, Int64}, 1}, Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Nothing, Int64}, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, Int64}, 1}, Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Union{Nothing, Int64}, 1}, Array{Any, 1}})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#27#44")), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.all), Function, Tuple{Int64, Nothing, Nothing, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Base._all), typeof(Base.isnothing), Tuple{Int64, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Colon})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(CovidCountyDash, Symbol("#28#45")), Array{NamedTuple{(:prop_id, :value), T} where T<:Tuple, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{NamedTuple{(:prop_id, :value), T} where T<:Tuple, 1}, getfield(CovidCountyDash, Symbol("#28#45"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{NamedTuple{(:prop_id, :value), T} where T<:Tuple, 1}, getfield(CovidCountyDash, Symbol("#28#45"))}, Int64})
precompile(Tuple{typeof(Dash._single_element_vect), Base.KeySet{Int64, OrderedCollections.OrderedDict{Int64, String}}})
precompile(Tuple{typeof(Dash.validate_callback_return), Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}, Array{Base.KeySet{Int64, OrderedCollections.OrderedDict{Int64, String}}, 1}, Symbol})
precompile(Tuple{typeof(Dash._push_to_res!), Base.Dict{String, Any}, Array{Base.KeySet{Int64, OrderedCollections.OrderedDict{Int64, String}}, 1}, Array{NamedTuple{(:id, :property), Tuple{String, String}}, 1}})
precompile(Tuple{typeof(JSON2.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Base.KeySet{Int64, OrderedCollections.OrderedDict{Int64, String}}}})
precompile(Tuple{typeof(Base.similar), Array{Nothing, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, Int64}, 1}, Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash._item_to_dict!), Tuple{Base.RefValue{Base.Dict{String, Any}}, Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, Int64}, 1}, Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Dash.input_to_arg), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(CovidCountyDash, Symbol("#27#44")), Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.all), Function, Tuple{Nothing, Nothing, Nothing, Int64, Nothing, Nothing}})
precompile(Tuple{typeof(Base._all), typeof(Base.isnothing), Tuple{Nothing, Nothing, Nothing, Int64, Nothing, Nothing}, Base.Colon})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Float64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Float64, 1}, 1}, Base.Generator{Array{Array{Float64, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:mode, :y, :name, :customdata, :hovertemplate, :x), T} where T<:Tuple}, Tuple{String, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:mode, :y, :name, :customdata, :hovertemplate, :x), Tuple{String, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}}, Type{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}}, String})
precompile(Tuple{Type{NamedTuple{(:prop_id, :value), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Float32})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Int64, 1}, Float32}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Int64, 1}, Float32}}})
precompile(Tuple{Type{NamedTuple{(:values, :popvalues, :dates, :location), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, String}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:values, :popvalues, :dates, :location), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Dates.Date, 1}, String}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.copy), Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Symbol})
precompile(Tuple{Type{NamedTuple{(:mode, :y, :name, :customdata, :hovertemplate, :x), T} where T<:Tuple}, Tuple{String, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:mode, :y, :name, :customdata, :hovertemplate, :x), Tuple{String, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, String, Base.SubArray{Dates.Date, 1, Array{Dates.Date, 1}, Tuple{Array{Int64, 1}}, false}}}, Type{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}}, String})
precompile(Tuple{typeof(Base.setindex!), PlotlyBase.GenericTrace{Base.Dict{Symbol, Any}}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.vcat), Float32, Array{Int64, 1}})
precompile(Tuple{typeof(Base.cat_indices), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float32, 1}, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPServer})
precompile(Tuple{getfield(MbedTLS, Symbol("#21#23")){MbedTLS.SSLContext}, MbedTLS.SSLContext})
precompile(Tuple{getfield(MbedTLS, Symbol("#15#16")), MbedTLS.CRT})
precompile(Tuple{getfield(MbedTLS, Symbol("#10#11")), MbedTLS.CtrDrbg})
precompile(Tuple{getfield(MbedTLS, Symbol("#8#9")), MbedTLS.Entropy})
precompile(Tuple{getfield(MbedTLS, Symbol("#17#19")), MbedTLS.SSLConfig})
